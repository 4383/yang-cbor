



Internet Engineering Task Force                        M. Veillette, Ed.
Internet-Draft                                   Trilliant Networks Inc.
Intended status: Informational                             A. Pelov, Ed.
Expires: July 10, 2016                                            Acklio
                                                             A. Somaraju
                                                   Tridonic GmbH & Co KG
                                                               R. Turner
                                                              Landis+Gyr
                                                             A. Minaburo
                                                                  Acklio
                                                        January 07, 2016


                CBOR Encoding of Data Modeled with YANG
             draft-veillette-core-yang-cbor-mapping-latest

Abstract

   This document defines encoding rules for representing configuration,
   state data, RPC input and output parameters, and notifications
   defined using YANG as Concise Binary Object Representation (CBOR,
   RFC7049).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 10, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Veillette, et al.         Expires July 10, 2016                 [Page 1]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology and Notation  . . . . . . . . . . . . . . . . . .   3
     2.1.  CBOR diagnostic notation  . . . . . . . . . . . . . . . .   3
   3.  Properties of the CBOR Encoding . . . . . . . . . . . . . . .   4
   4.  Structured IDentifiers (SID)  . . . . . . . . . . . . . . . .   4
   5.  Encoding of YANG Data Node Instances  . . . . . . . . . . . .   4
     5.1.  The "leaf" Data Node  . . . . . . . . . . . . . . . . . .   4
     5.2.  The "container" Data Node . . . . . . . . . . . . . . . .   5
     5.3.  The "leaf-list" Data Node . . . . . . . . . . . . . . . .   6
     5.4.  The "list" Data Node  . . . . . . . . . . . . . . . . . .   6
     5.5.  The "choice" Statement  . . . . . . . . . . . . . . . . .   8
     5.6.  The "anydata" Data Node . . . . . . . . . . . . . . . . .   9
     5.7.  The "anyxml" Data Node  . . . . . . . . . . . . . . . . .   9
   6.  Representing YANG Data Types in CBOR  . . . . . . . . . . . .  10
     6.1.  The unsigned integer Types  . . . . . . . . . . . . . . .  10
     6.2.  The integer Types . . . . . . . . . . . . . . . . . . . .  10
     6.3.  The "decimal64" Type  . . . . . . . . . . . . . . . . . .  10
     6.4.  The "string" Type . . . . . . . . . . . . . . . . . . . .  11
     6.5.  The "boolean" Type  . . . . . . . . . . . . . . . . . . .  11
     6.6.  The "enumeration" Type  . . . . . . . . . . . . . . . . .  11
     6.7.  The "bits" Type . . . . . . . . . . . . . . . . . . . . .  12
     6.8.  The "binary" Type . . . . . . . . . . . . . . . . . . . .  13
     6.9.  The "leafref" Type  . . . . . . . . . . . . . . . . . . .  13
     6.10. The "identityref" Type  . . . . . . . . . . . . . . . . .  14
     6.11. The "empty" Type  . . . . . . . . . . . . . . . . . . . .  14
     6.12. The "union" Type  . . . . . . . . . . . . . . . . . . . .  15
     6.13. The "instance-identifier" Type  . . . . . . . . . . . . .  15
   7.  CBOR Compliance . . . . . . . . . . . . . . . . . . . . . . .  17
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  17
   9.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  18
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  18
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  18
     10.2.  Informative References . . . . . . . . . . . . . . . . .  18
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  19








Veillette, et al.         Expires July 10, 2016                 [Page 2]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


1.  Introduction

   The specification of YANG 1.1 data modelling language
   [I-D.ietf-netmod-rfc6020bis] defines only XML encoding for data
   instances, i.e. contents of configuration datastores, state data, RPC
   operation or action input and output parameters, and event
   notifications.

   A new set of encoding rules has been defined to allow the use of the
   same data models in environments based on the JavaScript Object
   Notation (JSON) Data Interchange Format [RFC7159].  This is
   accomplished in the JSON Encoding of Data Modeled with YANG
   specification [I-D.ietf-netmod-yang-json].

   The aim of this document is to define a set of encoding rules for the
   Concise Binary Object Representation (CBOR) [RFC7049].  The resulting
   encoding is more compact compared to XML and JSON and more suitable
   of Constrained Nodes and/or Constrained Networks as defined by
   [RFC7228].

2.  Terminology and Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   This specification makes use of the following terminology:

   o  Data node: A node in the YANG schema that can be instantiated in a
      datastore.  One of container, leaf, leaf-list, list, or anyxml.

   o  Child data node: A data node defined within a container or a list
      is a child of this container or list.  The container or list is
      the parent of the data node.

   o  Identifier: An identifier embodies the information required to
      distinguish what is being identified from all other things within
      its scope of identification.

   o  Parent data node: See Child data node.

2.1.  CBOR diagnostic notation

   Within this document, CBOR binary contents are represented using an
   equivalent textual form called CBOR diagnostic notation.  This
   notation is used strictly for documentation purposes and is never
   transmitted as such.




Veillette, et al.         Expires July 10, 2016                 [Page 3]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   +----------+------+--------------------------+-----------+----------+
   | CBOR     | CBOR | Text representation      | Example   | CBOR     |
   | content  | type |                          |           | encoding |
   +----------+------+--------------------------+-----------+----------+
   | Unsigned | 0    | Decimal digits           | 123       | 18 7b    |
   | integer  |      |                          |           |          |
   | Negative | 1    | Decimal digits prefixed  | -123      | 38 7a    |
   | integer  |      | by a minus sign          |           |          |
   | Byte     | 2    | Hexadecimal value        | h'f15c'   | 42 f15c  |
   | string   |      | enclosed between single  |           |          |
   |          |      | quotes and prefixed by   |           |          |
   |          |      | an 'h'                   |           |          |
   | Text     | 3    | String of Unicode        | "txt"     | 63       |
   | string   |      | characters enclosed      |           | 747874   |
   |          |      | between double quotes    |           |          |
   | Array    | 4    | Comma separated list of  | [ 1, 2 ]  | 82 01 02 |
   |          |      | values within square     |           |          |
   |          |      | brackets                 |           |          |
   | Map      | 5    | Comma separated list of  | { 1: 123, | a2       |
   |          |      | name/value pairs within  | 2: 456 }  | 01187b   |
   |          |      | curly braces             |           | 021901c8 |
   | Boolean  | 7/20 | false                    | false     | f4       |
   |          | 7/21 | true                     | true      | f5       |
   | Null     | 7/22 | null                     | null      | f6       |
   | Not      | 7/23 | undefined                | undefined | f7       |
   | assigned |      |                          |           |          |
   +----------+------+--------------------------+-----------+----------+

3.  Properties of the CBOR Encoding

   TO DO

4.  Structured IDentifiers (SID)

   TO DO

5.  Encoding of YANG Data Node Instances

   Objects defined using the YANG modeling language are encoded using
   CBOR [RFC7049] based on the rules defined in this section.  We assume
   that the reader is already familiar with both YANG [RFC6020] and CBOR
   [RFC7049].

5.1.  The "leaf" Data Node

   TO DO





Veillette, et al.         Expires July 10, 2016                 [Page 4]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


5.2.  The "container" Data Node

   A container MUST be encoded using a CBOR map data item (major type
   5).  A map is comprised of pairs of data items, with each data item
   consisting of a key and a value.  CBOR map keys MUST be encoded using
   a CBOR unsigned integer (major type 0) and set to a data node ID or a
   fully-qualified data node ID.  Data node IDs MUST be used when a
   parent node exists and this parent shares the same module ID as the
   current data node.  CBOR map values MUST be encoded using the rules
   associated with the data node type.

   Definition example [RFC7317]:

   typedef date-and-time {
     type string {
       pattern '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]
                \d{2}:\d{2})';
     }
   }

   container clock {
     leaf current-datetime {
       type date-and-time;
     }

     leaf boot-datetime {
           type date-and-time;
     }
   }

   CBOR diagnostic notation:

   {
     69667 : {
       36 : "2015-10-02T14:47:24Z-05:00",
       37 : "2015-09-15T09:12:58Z-05:00"
     }
   }

   CBOR encoding:

   a1
     1a 00011023
     a2
       18 24
       78 1a 323031352d31302d30325431343a34373a32345a2d30353a3030
       18 25
       78 1a 323031352d30392d31355430393a31323a35385a2d30353a3030



Veillette, et al.         Expires July 10, 2016                 [Page 5]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   In this example, we assume that the module ID = 68, data node IDs
   clock = 35, current-datetime = 36 and boot-datetime 37.

5.3.  The "leaf-list" Data Node

   A leaf-list MUST be encoded using a CBOR array data item (major type
   4).  Each entry MUST be encoded using the rules defined by the type
   specified.

   Definition example [RFC7317]:

   typedef domain-name {
     type string {
       length "1..253";
       pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9].)
                *([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?
                )|\.';
     }
   }

   leaf-list search {
     type domain-name;
     ordered-by user;
   }

   CBOR diagnostic notation: [ "ietf.org", "ieee.org" ]

   CBOR encoding: 82 68 696574662e6f7267 68 696565652e6f7267

5.4.  The "list" Data Node

   A list MUST be encoded using a CBOR array data item (major type 4).
   Each entry of this array is encoded using a CBOR map data item (major
   type 5) following the same rules as a YANG container.

   Definition example [RFC7317]:















Veillette, et al.         Expires July 10, 2016                 [Page 6]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   list server {
     key name;

     leaf name {
       type string;
     }
     choice transport {
       case udp {
         container udp {
           leaf address {
             type host;
             mandatory true;
           }
           leaf port {
             type port-number;
           }
         }
       }
     }
     leaf association-type {
       type enumeration {
         enum server;
         enum peer;
         enum pool;
       }
       default server;
     }
     leaf iburst {
       type boolean;
       default false;
     }
     leaf prefer {
       type boolean;
       default false;
     }
   }

   CBOR diagnostic notation:













Veillette, et al.         Expires July 10, 2016                 [Page 7]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   {
     69642 : [
       {
         11: "NRC TIC server",
         12 : {
           13: "tic.nrc.ca",
           14: 123
         },
         15 : 0,
         16 : false,
         17 : true
       },
       {
         11: "NRC TAC server",
         12 : {
           13: "tac.nrc.ca"
         }
       }
     ]
   }

   CBOR encoding:

   a1
      1a 0001100a
      82
         a5
            0b 6e 4e52432054494320736572766572
            0c a2
               0d 6a 7469632e6e72632e6361
               0e 18 7b
            0f 00
            10 f4
            11 f5
         a2
            0b 6f 4e5243205441432073657276657220
            0c a1
               0d 6a 7461632e6e72632e6361

   In this example, we assume that the module ID = 68, data node IDs
   server = 10, name = 11, udp = 12, address = 13, port = 14,
   association-type = 15, iburst = 16, prefer = 17.

5.5.  The "choice" Statement

   YANG allows the data model to segregate incompatible nodes into
   distinct choices using the "choice" and "case" statements.  Encoded




Veillette, et al.         Expires July 10, 2016                 [Page 8]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   payload MUST carry data nodes defined in only one of the possible
   cases.

   Definition example [RFC7317]:

   typedef timezone-name {
     type string;
   }

   choice timezone {
     case timezone-name {
       leaf timezone-name {
         type timezone-name;
       }
     }
     case timezone-utc-offset {
       leaf timezone-utc-offset {
         type int16 {
           range "-1500 .. 1500";
         }
         units "minutes";
       }
     }
   }

   CBOR diagnostic notation:

   {
     69638 : "Europe/Stockholm"
   }

   CBOR encoding:

   a1
      1a 00011006
      70
         4575726f70652f53746f636b686f6c6d

5.6.  The "anydata" Data Node

   TO DO

5.7.  The "anyxml" Data Node

   TO DO






Veillette, et al.         Expires July 10, 2016                 [Page 9]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


6.  Representing YANG Data Types in CBOR

6.1.  The unsigned integer Types

   Leafs of type uint8, uint16, uint32 and uint64 MUST be encoded using
   a CBOR unsigned integer data item (major type 0).

   Definition example [RFC7277]:

   leaf mtu {
     type uint16 {
       range "68..max";
     }
   }

   CBOR diagnostic notation: 1280

   CBOR encoding: 19 0500

6.2.  The integer Types

   Leafs of type int8, int16, int32 and int64 MUST be encoded using
   either CBOR unsigned integer (major type 0) or CBOR signed integer
   (major type 1), depending on the actual value.

   Definition example [RFC7317]:

   leaf timezone-utc-offset {
     type int16 {
       range "-1500 .. 1500";
     }
   }

   CBOR diagnostic notation: -300

   CBOR encoding: 39 012b

6.3.  The "decimal64" Type

   Leafs of type decimal64 MUST be encoded using either CBOR unsigned
   integer (major type 0) or CBOR signed integer (major type 1),
   depending on the actual value.

   Definition example [RFC7317]:







Veillette, et al.         Expires July 10, 2016                [Page 10]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   leaf my-decimal {
     type decimal64 {
       fraction-digits 2;
       range "1 .. 3.14 | 10 | 20..max";
     }
   }

   CBOR diagnostic notation: 257 (Represents decimal value 2.57)

   CBOR encoding: 19 0101

6.4.  The "string" Type

   Leafs of type string MUST be encoded using a CBOR text string data
   item (major type 3).

   Definition example [RFC7223]:

   leaf name {
     type string;
   }

   CBOR diagnostic notation: "eth0"

   CBOR encoding: 64 65746830

6.5.  The "boolean" Type

   Leafs of type boolean MUST be encoded using a CBOR true (major type
   7, additional information 21) or false data item (major type 7,
   additional information 20).

   Definition example [RFC7317]:

   leaf enabled {
     type boolean;
   }

   CBOR diagnostic notation: true

   CBOR encoding: f5

6.6.  The "enumeration" Type

   Leafs of type enumeration MUST be encoded using a CBOR unsigned
   integer data item (major type 0).

   Definition example [RFC7317]:



Veillette, et al.         Expires July 10, 2016                [Page 11]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   leaf oper-status {
     type enumeration {
       enum up { value 1; }
       enum down { value 2; }
       enum testing { value 3; }
       enum unknown { value 4; }
       enum dormant { value 5; }
       enum not-present { value 6; }
       enum lower-layer-down { value 7; }
     }
   }

   CBOR diagnostic notation: 3 (Represents enumeration value "testing")

   CBOR encoding: 03

6.7.  The "bits" Type

   Leafs of type bits MUST be encoded using a CBOR byte string data item
   (major type 2).  Bits position 0 to 7 are assigned to the first byte
   within the byte string, bits 8 to 15 to the second byte, and
   subsequent bytes are assigned similarly.  Within each byte, bits are
   assigned from least to most significant.

   Definition example [RFC6020]:

   leaf mybits {
     type bits {
       bit disable-nagle {
         position 0;
       }
       bit auto-sense-speed {
         position 1;
       }
       bit 10-Mb-only {
         position 2;
       }
     }
   }

   CBOR diagnostic notation: h'05' (Represents bits disable-nagle and
   10-Mb-only set)

   CBOR encoding: 41 05







Veillette, et al.         Expires July 10, 2016                [Page 12]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


6.8.  The "binary" Type

   Leafs of type binary MUST be encoded using a CBOR byte string data
   item (major type 2).

   Definition example:

   leaf aes128-key {
     type binary {
       length 16;
     }
   }

   CBOR diagnostic notation: h'1f1ce6a3f42660d888d92a4d8030476e'

   CBOR encoding: 50 1f1ce6a3f42660d888d92a4d8030476e

6.9.  The "leafref" Type

   Leafs of type leafref MUST be encoded using the rules of the data
   node referenced by the "path" YANG statement.

   Definition example [RFC7223]:

   typedef interface-state-ref {
     type leafref {
       path "/interfaces-state/interface/name";
     }
   }

   container interfaces-state {
     list interface {
       key "name";
       leaf name {
         type string;
       }
       leaf-list higher-layer-if {
         type interface-state-ref;
       }
     }
   }

   CBOR diagnostic notation: "eth1.10"

   CBOR encoding: 67 657468312e3130






Veillette, et al.         Expires July 10, 2016                [Page 13]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


6.10.  The "identityref" Type

   Leafs of type identityref MUST be encoded using a CBOR text string
   data item (major type 3).  Unlike XML, CBOR does not support
   namespaces.  To overcome this limitation, identities are encoded
   using a concatenation of the identity name(s) of the referenced
   identities, excluding the base identity and separated by dot(s).

   Definition example [RFC7223]:

   identity interface-type {
   }

   identity iana-interface-type {
     base interface-type;
   }

   identity ethernetCsmacd {
     base iana-interface-type;
   }

   leaf type {
     type identityref {
       base interface-type;
     }
   }

   CBOR diagnostic notation: "iana-interface-type.ethernetCsmacd"

   CBOR encoding: 78 22
   69616e612d696e746572666163652d747970652e65746865726e657443736d616364

6.11.  The "empty" Type

   Leafs of type empty MUST be encoded using the CBOR null value (major
   type 7, additional information 22).

   Definition example [RFC7277]:

   leaf is-router {
     type empty;
   }

   CBOR diagnostic notation: null

   CBOR encoding: f6





Veillette, et al.         Expires July 10, 2016                [Page 14]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


6.12.  The "union" Type

   Leafs of type union MUST be encoded using the rules associated with
   one of the type listed.

   Definition example [RFC7317]:

   typedef ipv4-address {
     type string {
     pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}
              ([0-9][1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}
              \p{L}]+)?';
     }
   }

   typedef ipv6-address {
     type string {
       pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a
                -fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0
                -9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0
                -9]?[0-9])))(%[\p{N}\p{L}]+)?';
       pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)
                ?::(([^:]+:)*[^:]+)?)(%.+)?';
     }
   }

   typedef ip-address {
     type union {
       type ipv4-address;
       type ipv6-address;
     }
   }

   leaf address {
     type inet:ip-address;
   }

   CBOR diagnostic notation: "[2001:db8:0:1]:80"

   CBOR encoding: 71 5b323030313a6462383a303a315d3a3830

6.13.  The "instance-identifier" Type

   When a leaf node of type instance-identifier identifies a single
   instance data node (data node not part of a list), its value MUST be
   encoded using a CBOR unsigned integer data item (major type 0)
   containing the targeted data node ID.




Veillette, et al.         Expires July 10, 2016                [Page 15]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   Definition example [RFC7317]:

   container system {

     leaf contact {
       type string;
     }

     leaf hostname {
       type inet:domain-name;
     }
   }

   CBOR diagnostic notation: 69635

   CBOR encoding: 1a 00011003

   In this example, the value 69635 identifies the instance of the data
   node "hostname" within the ietf-system module.  Assuming module ID =
   68 and data node ID = 3.

   When a leaf node of type instance-identifier identifies a data node
   supporting multiple instances (data node part of a list), its value
   MUST be encoded using a CBOR array data item (major type 4)
   containing the following entries:

   o  a CBOR unsigned integer data item (major type 0) containing the
      fully-qualified data node ID of the targeted data node.

   o  a CBOR array data item (major type 4) containing the value of each
      key required to identify the instance of the targeted data node.
      These keys MUST be ordered as defined in the "key" YANG statement,
      starting from top level list, and follow by each of the
      subordinate list(s).

   Definition example [RFC7317]:















Veillette, et al.         Expires July 10, 2016                [Page 16]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   list user {
     key name;

     leaf name {
       type string;
     }
     leaf password {
       type ianach:crypt-hash;
     }

     list authorized-key {
       key name;

       leaf name {
         type string;
       }
       leaf algorithm {
         type string;
       }
       leaf key-data {
         type binary;
     }
   }

   CBOR diagnostic notation: [69679, ["bob", "admin"]]

   CBOR encoding: 82 1a 0001102f 82 63 626f62 65 61646d696e

   This example identifies the instance of the data node "key-data"
   within the ietf-system module, associated with user name "bob" and
   authorized-key name "admin".  Assuming module ID = 68 and data node
   ID = 47.

7.  CBOR Compliance

   TO DO

8.  Security Considerations

   This document defines an alternative encoding for data modeled in the
   YANG data modeling language.  As such, this encoding doesn't
   contribute any new security issues in addition of those identified
   for the specific protocol or context for which it is used.

   To minimize security risks, software on the receiving side SHOULD
   reject all messages that do not comply to the rules of this document
   and reply with an appropriate error message to the sender.




Veillette, et al.         Expires July 10, 2016                [Page 17]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


9.  Acknowledgments

   This document have been largely inspired by the extensive works done
   by Andy Bierman and Peter van der Stok on [ID.vanderstok-core-comi].
   [I-D. ietf-netmod-yang-json] have also been a critical reference for
   our work.  The authors would like to thank the authors and
   contributors to these two important drafts.

   The authors would also like to acknowledge the review, feedback, and
   comments from Ladislav Lhotka and Juergen Schoenwaelder.

10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <http://www.rfc-editor.org/info/rfc6020>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <http://www.rfc-editor.org/info/rfc7049>.

10.2.  Informative References

   [I-D.ietf-netmod-rfc6020bis]
              Bjorklund, M., "The YANG 1.1 Data Modeling Language",
              draft-ietf-netmod-rfc6020bis-09 (work in progress),
              December 2015.

   [I-D.ietf-netmod-yang-json]
              Lhotka, L., "JSON Encoding of Data Modeled with YANG",
              draft-ietf-netmod-yang-json-06 (work in progress), October
              2015.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

   [RFC7223]  Bjorklund, M., "A YANG Data Model for Interface
              Management", RFC 7223, DOI 10.17487/RFC7223, May 2014,
              <http://www.rfc-editor.org/info/rfc7223>.



Veillette, et al.         Expires July 10, 2016                [Page 18]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <http://www.rfc-editor.org/info/rfc7228>.

   [RFC7277]  Bjorklund, M., "A YANG Data Model for IP Management",
              RFC 7277, DOI 10.17487/RFC7277, June 2014,
              <http://www.rfc-editor.org/info/rfc7277>.

   [RFC7317]  Bierman, A. and M. Bjorklund, "A YANG Data Model for
              System Management", RFC 7317, DOI 10.17487/RFC7317, August
              2014, <http://www.rfc-editor.org/info/rfc7317>.

Authors' Addresses

   Michel Veillette (editor)
   Trilliant Networks Inc.
   610 Rue du Luxembourg
   Granby, Quebec  J2J 2V2
   Canada

   Phone: +14503750556
   Email: michel.veillette@trilliantinc.com


   Alexander Pelov (editor)
   Acklio
   2 Rue de la Chataigneraie
   Cesson-Sevigne, Bretagne  35510
   France

   Phone: +33299127004
   Email: a@ackl.io


   Abhinav Somaraju
   Tridonic GmbH & Co KG
   Farbergasse 15
   Dornbirn, Vorarlberg  6850
   Austria

   Phone: +43664808926169
   Email: abhinav.somaraju@tridonic.com








Veillette, et al.         Expires July 10, 2016                [Page 19]

Internet-Draft   CBOR Encoding of Data Modeled with YANG    January 2016


   Randy Turner
   Landis+Gyr
   30000 Mill Creek Ave
   Suite 100
   Alpharetta, GA  30022
   US

   Phone: ++16782581292
   Email: randy.turner@landisgyr.com
   URI:   http://www.landisgyr.com/


   Ana Minaburo
   Acklio
   2 rue de la chataigneraie
   Cesson-Sevigne, Bretagne  35510
   France

   Phone: +33299127026
   Email: ana@ackl.io































Veillette, et al.         Expires July 10, 2016                [Page 20]
